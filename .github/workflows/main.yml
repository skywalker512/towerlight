name: "main"

on:
  push:
  pull_request:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      haveProject: ${{ steps.set-matrix.outputs.haveProject }}
      testMatrix: ${{ steps.set-matrix.outputs.testMatrix }}
      testHaveProject: ${{ steps.set-matrix.outputs.testHaveProject }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup node 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Yarn Cache
        uses: actions/cache@v2
        # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      - name: Calculate Matrix
        id: set-matrix
        run: |
          yarn ts-node --dir tools scripts/calculate-commands.ts
  do:
    needs: prepare
    if: ${{ contains(needs.prepare.outputs.haveProject, 'true') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: setup node 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Yarn Cache
        uses: actions/cache@v2
        # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      - name: Run ${{ matrix.name }}
        run: yarn nx run-many --target=${{ matrix.target }} --projects=${{ join(matrix.runs, ',') }} --parallel --prod
  test:
    needs: prepare
    if: ${{ contains(needs.prepare.outputs.testHaveProject, 'true') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.testMatrix)}}
    services:
      postgres:
        image: "postgres:13-alpine"
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: setup node 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Yarn Cache
        uses: actions/cache@v2
        # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      - name: Run ${{ matrix.name }}
        run: yarn nx run-many --target=test --projects=main --parallel --prod
        env:
          DB_HOST: localhost
          DB_USER: postgres
          DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DB_DATABESE: postgres
